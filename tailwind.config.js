import * as tokens from "@netlify/netlify-design-tokens";

/** @type {import('tailwindcss').Config} */
export default {
  content: ["./src/**/*.tsx", "./index.html"],
  prefix: "tw-",
  theme: {
    fontFamily: {
      mono: tokens.typographyFontsMono,
      sans: tokens.typographyFontsSans,
    },
    borderRadius: {
      none: '0',
      sm: tokens.sizeBorderRadiusSmall,
      lg: tokens.sizeBorderRadiusBig,
      card: tokens.sizeBorderRadiusBig,
      full: '9999px',
    },
    boxShadow: {
      shallow: 'var(--shallowShadow)',
      deep: 'var(--deepShadow)',
      none: 'none'
    },
    colors: {
      transparent: "transparent",
      black: {
        DEFAULT: "rgb(var(--colorBlack) / <alpha-value>)",
        darker: "rgb(var(--colorBlackDarker) / <alpha-value>)",
      },
      white: "rgb(var(--colorWhite) / <alpha-value>)",
      bgApp: "rgb(var(--colorBgApp) / <alpha-value>)",
      bg: "var(--colorBg)",
      bgHover: "var(--colorBgHover)",
      bgDanger: "rgb(var(--colorBgDanger) / <alpha-value>)",
      bgDangerHover: "rgb(var(--colorBgDangerHover) / <alpha-value>)",
      bgInverse: "rgb(var(--colorBgInverse) / <alpha-value>)",
      overlay: "var(--colorOverlay)",
      textLoud: "rgb(var(--colorTextLoud) / <alpha-value>)",
      text: "rgb(var(--colorText) / <alpha-value>)",
      textMuted: "rgb(var(--colorTextMuted) / <alpha-value>)",
      textInverse: "rgb(var(--colorTextInverse) / <alpha-value>)",
      placeholder: "rgb(var(--colorPlaceholder) / <alpha-value>)",
      textMutedInverse: "rgb(var(--colorTextMutedInverse) / <alpha-value>)",
      gray: {
        darkest: "rgb(var(--colorGrayDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorGrayDarker) / <alpha-value>)",
        dark: "rgb(var(--colorGrayDark) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorGray) / <alpha-value>)",
        light: "rgb(var(--colorGrayLight) / <alpha-value>)",
        lighter: "rgb(var(--colorGrayLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorGrayLightest) / <alpha-value>)",
      },
      teal: {
        darkest: "rgb(var(--colorTealDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorTealDarker) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorTeal) / <alpha-value>)",
        lighter: "rgb(var(--colorTealLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorTealLightest) / <alpha-value>)",
      },
      blue: {
        darkest: "rgb(var(--colorBlueDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorBlueDarker) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorBlue) / <alpha-value>)",
        lighter: "rgb(var(--colorBlueLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorBlueLightest) / <alpha-value>)",
      },
      gold: {
        darkest: "rgb(var(--colorGoldDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorGoldDarker) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorGold) / <alpha-value>)",
        lighter: "rgb(var(--colorGoldLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorGoldLightest) / <alpha-value>)",
      },
      red: {
        darkest: "rgb(var(--colorRedDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorRedDarker) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorRed) / <alpha-value>)",
        lighter: "rgb(var(--colorRedLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorRedLightest) / <alpha-value>)",
      },
      purple: {
        darkest: "rgb(var(--colorPurpleDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorPurpleDarker) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorPurple) / <alpha-value>)",
        lighter: "rgb(var(--colorPurpleLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorPurpleLightest) / <alpha-value>)",
      },
      pink: {
        darkest: "rgb(var(--colorPinkDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorPinkDarker) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorPink) / <alpha-value>)",
        lighter: "rgb(var(--colorPinkLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorPinkLightest) / <alpha-value>)",
      },
      green: {
        darkest: "rgb(var(--colorGreenDarkest) / <alpha-value>)",
        darker: "rgb(var(--colorGreenDarker) / <alpha-value>)",
        DEFAULT: "rgb(var(--colorGreen) / <alpha-value>)",
        lighter: "rgb(var(--colorGreenLighter) / <alpha-value>)",
        lightest: "rgb(var(--colorGreenLightest) / <alpha-value>)",
      },
      hr: "rgb(var(--colorHr) / <alpha-value>)",
    },
    fontSize: {
      0: '0',
      xs: tokens.typographySizeTiny,
      sm: tokens.typographySizeSmall,
      base: tokens.typographySizeMedium,
      lg: tokens.typographySizeLarge,
      xl: tokens.typographySizeXl,
      '2xl': tokens.typographySizeXxl,
      '3xl': tokens.typographySizeXxxl,
      '4xl': tokens.typographySize4xl,
    },
    minHeight: ({ theme }) => ({
      0: '0',
      full: '100%',
      screen: '100vh',
      ...theme('spacing')
  }),
  },
  plugins: [],
};
