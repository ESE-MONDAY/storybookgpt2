import { useState, useMemo, useEffect, useRef } from "react";
import { App } from "../App";
import { useChat } from "../hooks/use-chat";
import { ChatMessage } from "../components/ChatMessage";
import { appConfig } from "../../config.browser";
import clsx from "clsx";

const DISPLAY_CLEAR_BUTTON = false;
const DISPLAY_SUBMIT_BUTTON = false;

export default function Index() {
  // The content of the box where the user is typing
  const [message, setMessage] = useState<string>("");

  // This hook is responsible for managing the chat and communicating with the
  // backend
  const { currentChat, chatHistory, sendMessage, cancel, state, clear } =
    useChat();

  // This is the message that is currently being generated by the AI
  const currentMessage = useMemo(() => {
    return { content: currentChat ?? "", role: "assistant" } as const;
  }, [currentChat]);

  // This is a ref to the bottom of the chat history. We use it to scroll
  // to the bottom when a new message is added.
  const bottomRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [currentChat, chatHistory, state]);

  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // This is a ref to the input box. We use it to focus the input box when the
  // user clicks on the "Send" button.
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const focusInput = () => {
    textareaRef.current?.focus();
  };

  useEffect(() => {
    focusInput();
  }, [state]);

  useEffect(() => {
    const handleCopy = async (e: KeyboardEvent) => {
      if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === "c") {
        e.preventDefault();
        const lastMessage = chatHistory[chatHistory.length - 1];
        if (lastMessage) {
          try {
            const code = lastMessage.content
              .replace(/[\s\S]*```tsx\n/, "")
              .replace(/\n```[\s\S]*/, "");

            await navigator.clipboard.writeText(code);
            alert("Story code response copied to clipboard");
          } catch (err) {
            console.error("Failed to copy text: ", err);
          }
        }
      }
    };

    window.addEventListener("keydown", handleCopy);

    // Cleanup the event listener
    return () => {
      window.removeEventListener("keydown", handleCopy);
    };
  }, [chatHistory]);

  return (
    <App title="StorybookGPT">
      <main className="tw-bg-white md:tw-rounded-lg md:tw-shadow-2xl tw-p-6 tw-w-full tw-flex tw-flex-col tw-h-full">
        <section className="tw-overflow-y-auto tw-pr-2 tw-flex-grow tw-pb-8 tw-justify-stretch">
          <div
            className={clsx(
              "tw-flex tw-flex-col tw-space-y-4 tw-justify-start",
              chatHistory.length === 0 && "tw-h-full"
            )}
          >
            {chatHistory.length === 0 ? (
              <>
                {appConfig.samplePhrases.length > 0 && (
                  <div className="tw-grid tw-flex-1 tw-grid-cols-1 md:tw-grid-cols-2 lg:tw-grid-cols-3 tw-gap-4">
                    {appConfig.samplePhrases.map((phrase) => (
                      <button
                        key={phrase}
                        onClick={() => sendMessage(phrase, chatHistory)}
                        className="tw-bg-slate-100 tw-border-slate-200 tw-border tw-rounded-lg tw-p-4"
                      >
                        {phrase}
                      </button>
                    ))}
                  </div>
                )}
                <div className="tw-text-center tw-flex tw-gap-2 tw-flex-col tw-flex-1 tw-justify-center">
                  <div className="after:content-[''] after:tw-rounded-full after:tw-absolute after:tw-border after:tw-border-black/20 tw-rounded-full tw-mx-auto tw-w-20 tw-aspect-square tw-relative after:tw-left-0 after:tw-top-0 after:tw-right-0 after:tw-bottom-0 tw-overflow-hidden">
                    <img
                      src="/logo.png"
                      alt=""
                      className="tw-absolute tw-l-0 tw-t-0"
                    />
                  </div>
                  <div>
                    <h1 className="tw-my-2 tw-text-xl tw-font-semibold tw-leading-tight tw-text-slate-900">
                      StorybookGPT
                    </h1>
                    <p className="tw-text-slate-500 tw-text-lg [text-wrap:balance] tw-leading-snug">
                      Generate Storybook stories in React and TypeScript with
                      CSF 2.0
                    </p>
                  </div>
                </div>
              </>
            ) : (
              chatHistory.map((chat, i) => (
                <ChatMessage key={i} message={chat} />
              ))
            )}

            {currentChat ? <ChatMessage message={currentMessage} /> : null}
          </div>

          <div ref={bottomRef} />
        </section>
        <div
          className={clsx(
            "tw-flex tw-items-center tw-justify-center",
            state === "idle" && "tw-pt-1"
          )}
        >
          {state === "idle" ? null : (
            <button
              className="tw-bg-slate-100 tw-text-slate-800 tw-py-2 tw-px-3 tw-border tw-border-slate-200 tw-rounded-lg tw-text-sm"
              onClick={cancel}
            >
              <span className="tw-font-bold"> ⃞</span> Stop generating
            </button>
          )}
        </div>
        <section className="tw-my-2">
          <form
            onSubmit={(e) => {
              e.preventDefault();
              if (message === "") return;
              sendMessage(message, chatHistory);
              setMessage("");
            }}
            onReset={(e) => {
              e.preventDefault();
              setMessage("");
            }}
            onKeyDown={(e) => {
              if (e.key === "Enter" && (e.metaKey || e.ctrlKey)) {
                e.preventDefault();
                if (message === "") return;
                sendMessage(message, chatHistory);
                setMessage("");
              }
              if (e.key === "Escape") {
                e.preventDefault();
                setMessage("");
              }
            }}
          >
            <div className="tw-flex">
              {DISPLAY_CLEAR_BUTTON && chatHistory.length > 1 ? (
                <button
                  className="tw-bg-slate-100 tw-text-slate-800 tw-py-2 tw-px-4 tw-rounded-l-lg tw-border-slate-300 tw-border"
                  type="reset"
                  onClick={(e) => {
                    e.preventDefault();
                    clear();
                  }}
                >
                  Clear
                </button>
              ) : null}
              <label htmlFor="message" className="tw-sr-only">
                Message
              </label>
              <textarea
                id="message"
                ref={textareaRef}
                value={message}
                className="tw-w-full tw-rounded-lg tw-py-[10px] tw-px-3 tw-border-slate-300 tw-outline-none tw-border tw-font-mono tw-min-h-40 tw-resize-none tw-placeholder-slate-400 tw-text-sm tw-text-slate-700 tw-shadow"
                placeholder={
                  state == "idle" ? "Paste React component code…" : "…"
                }
                onChange={(e) => setMessage(e.target.value)}
                disabled={state !== "idle"}
                autoFocus
                data-enable-grammarly="false"
                autoCorrect="off"
                autoCapitalize="off"
                spellCheck="false"
              ></textarea>
              {DISPLAY_SUBMIT_BUTTON && state === "idle" ? (
                <button
                  className="tw-bg-teal tw-text-teal-darkest tw-font-bold tw-py-2 tw-px-4 tw-rounded-r-lg tw--ml-[1px] tw-outline-none focus:tw-ring-2 focus:tw-ring-offset-1 focus:tw-ring-teal"
                  type="submit"
                >
                  Send
                </button>
              ) : null}
            </div>
            <p className="tw-text-xs tw-text-slate-500 tw-pt-1 tw-flex sm:tw-gap-8 tw-gap-3 tw-text-center tw-justify-center tw-mt-2 sm:tw-flex-row tw-flex-col">
              <button type="submit" className="[text-wrap:balance]">
                Submit:{" "}
                <kbd className="tw-px-1 tw-font-medium tw-py-[2px] tw-border tw-border-slate-200 tw-shadow-sm tw-bg-slate-100 tw-rounded-[4px]">
                  cmd
                </kbd>{" "}
                +{" "}
                <kbd className="tw-px-1 tw-font-medium tw-py-[2px] tw-border tw-border-slate-200 tw-shadow-sm tw-bg-slate-100 tw-rounded-[4px]">
                  return
                </kbd>
              </button>
              <button
                onClick={async () => {
                  const lastMessage = chatHistory[chatHistory.length - 1];
                  if (lastMessage) {
                    try {
                      const code = lastMessage.content
                        .replace(/[\s\S]*```tsx\n/, "")
                        .replace(/\n```[\s\S]*/, "");

                      await navigator.clipboard.writeText(code);
                      alert("Story code response copied to clipboard");
                    } catch (err) {
                      console.error("Failed to copy text: ", err);
                    }
                  }
                }}
                className="[text-wrap:balance]"
              >
                Copy story:{" "}
                <kbd className="tw-px-1 tw-font-medium tw-py-[2px] tw-border tw-border-slate-200 tw-shadow-sm tw-bg-slate-100 tw-rounded-[4px]">
                  cmd
                </kbd>{" "}
                +{" "}
                <kbd className="tw-px-1 tw-font-medium tw-py-[2px] tw-border tw-border-slate-200 tw-shadow-sm tw-bg-slate-100 tw-rounded-[4px]">
                  shift
                </kbd>{" "}
                +{" "}
                <kbd className="tw-px-1 tw-font-medium tw-py-[2px] tw-border tw-border-slate-200 tw-shadow-sm tw-bg-slate-100 tw-rounded-[4px]">
                  C
                </kbd>
              </button>
              <a href="/" className="[text-wrap:balance]">
                Clear chat:{" "}
                <kbd className="tw-px-1 tw-font-medium tw-py-[2px] tw-border tw-border-slate-200 tw-shadow-sm tw-bg-slate-100 tw-rounded-[4px]">
                  cmd
                </kbd>{" "}
                +{" "}
                <kbd className="tw-px-1 tw-font-medium tw-py-[2px] tw-border tw-border-slate-200 tw-shadow-sm tw-bg-slate-100 tw-rounded-[4px]">
                  R
                </kbd>
              </a>
            </p>
          </form>
        </section>
        <footer className="tw-flex tw-justify-center tw-mt-4 tw-mb-2">
          <p className="tw-text-xs tw-text-slate-400 [text-wrap:balance]">
            Built by{" "}
            <a
              className="tw-underline tw-underline-offset-2 tw-decoration-slate-300"
              href="https://twitter.com/kaelig"
              target="_blank"
            >
              Kaelig
            </a>{" "}
            with{" "}
            <a
              className="tw-underline tw-underline-offset-2 tw-decoration-slate-300"
              href="https://github.com/ascorbic/daneel"
              target="_blank"
            >
              Daneel
            </a>{" "}
            ·{" "}
            <a
              className="tw-underline tw-underline-offset-2 tw-decoration-slate-300"
              href="https://github.com/kaelig/storybookgpt#readme"
              target="_blank"
            >
              Deploy your own StorybookGPT
            </a>{" "}
            ·{" "}
            <a
              className="tw-underline tw-underline-offset-2 tw-decoration-slate-300"
              href="https://www.chromatic.com/customers/netlify"
              target="_blank"
            >
              Netlify + Chromatic
            </a>
          </p>
        </footer>
      </main>
    </App>
  );
}
