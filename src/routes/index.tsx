import { useState, useMemo, useEffect, useRef } from "react";
import { App } from "../App";
import { useChat } from "../hooks/use-chat";
import { ChatMessage } from "../components/ChatMessage";
import { appConfig } from "../../config.browser";
import logo from "../assets/logo.png";
import clsx from "clsx";

const DISPLAY_CLEAR_BUTTON = false;
const DISPLAY_SUBMIT_BUTTON = false;

export default function Index() {
  // The content of the box where the user is typing
  const [message, setMessage] = useState<string>("");

  // This hook is responsible for managing the chat and communicating with the
  // backend
  const { currentChat, chatHistory, sendMessage, cancel, state, clear } =
    useChat();

  // This is the message that is currently being generated by the AI
  const currentMessage = useMemo(() => {
    return { content: currentChat ?? "", role: "assistant" } as const;
  }, [currentChat]);

  // This is a ref to the bottom of the chat history. We use it to scroll
  // to the bottom when a new message is added.
  const bottomRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [currentChat, chatHistory, state]);

  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // This is a ref to the input box. We use it to focus the input box when the
  // user clicks on the "Send" button.
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const focusInput = () => {
    textareaRef.current?.focus();
  };

  useEffect(() => {
    focusInput();
  }, [state]);

  useEffect(() => {
    const handleCopy = async (e: KeyboardEvent) => {
      if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === "c") {
        e.preventDefault();
        const lastMessage = chatHistory[chatHistory.length - 1];
        if (lastMessage) {
          try {
            const code = lastMessage.content
              .replace(/[\s\S]*```ts\n/, "")
              .replace(/\n```[\s\S]*/, "");

            await navigator.clipboard.writeText(code);
            alert("Story code response copied to clipboard");
          } catch (err) {
            console.error("Failed to copy text: ", err);
          }
        }
      }
    };

    window.addEventListener("keydown", handleCopy);

    // Cleanup the event listener
    return () => {
      window.removeEventListener("keydown", handleCopy);
    };
  }, [chatHistory]);

  return (
    <App title="Create your own AI chat bot">
      <main className="tw-bg-white md:tw-rounded-lg md:tw-shadow-deep tw-p-6 tw-w-full tw-h-full tw-flex tw-flex-col">
        <section className="tw-overflow-y-auto tw-p-1 tw-flex-grow tw-mb-4 tw-pb-8 tw-justify-stretch">
          <div
            className={clsx(
              "tw-flex tw-flex-col tw-space-y-4 tw-justify-start",
              chatHistory.length === 0 && "tw-h-full"
            )}
          >
            {chatHistory.length === 0 ? (
              <>
                <div className="tw-grid tw-flex-1 tw-grid-cols-1 md:tw-grid-cols-2 lg:tw-grid-cols-3 tw-gap-4">
                  {appConfig.samplePhrases.map((phrase) => (
                    <button
                      key={phrase}
                      onClick={() => sendMessage(phrase, chatHistory)}
                      className="tw-bg-gray-lightest tw-border-gray-lighter tw-border tw-rounded-lg tw-p-4"
                    >
                      {phrase}
                    </button>
                  ))}
                </div>
                <div className="tw-text-center tw-flex tw-gap-2 tw-mt-4 tw-flex-col tw-flex-1 tw-justify-self-stretch">
                  <div className="after:content-[''] after:tw-rounded-full after:tw-absolute after:tw-border after:tw-border-black/20 tw-rounded-full tw-mx-auto tw-w-20 tw-aspect-square tw-relative after:tw-left-0 after:tw-top-0 after:tw-right-0 after:tw-bottom-0 tw-overflow-hidden">
                    <img
                      src={logo}
                      alt=""
                      className="tw-absolute tw-l-0 tw-t-0"
                    />
                  </div>
                  <div>
                    <h1 className="tw-text-xl tw-font-bold">
                      React / TypeScript StorybookGPT
                    </h1>
                    <p className="tw-text-gray-dark tw-text-lg [text-wrap:balance]">
                      Generate Storybook stories in React and TypeScript with
                      CSF v2
                    </p>
                  </div>
                </div>
              </>
            ) : (
              chatHistory.map((chat, i) => (
                <ChatMessage key={i} message={chat} />
              ))
            )}

            {currentChat ? <ChatMessage message={currentMessage} /> : null}
          </div>

          <div ref={bottomRef} />
        </section>
        <div className="tw-flex tw-items-center tw-justify-center tw-h-20">
          {state === "idle" ? null : (
            <button
              className="tw-bg-gray-lightest tw-text-gray-darker tw-py-2 tw-px-4 tw-my-8 tw-border tw-border-gray-lighter tw-rounded-lg"
              onClick={cancel}
            >
              ⃞ Stop generating
            </button>
          )}
        </div>
        <section className="tw-bg-gray-100 tw-rounded-lg tw-p-2">
          <form
            className="tw-flex"
            onSubmit={(e) => {
              e.preventDefault();
              sendMessage(message, chatHistory);
              setMessage("");
            }}
            onKeyDown={(e) => {
              if (e.key === "Enter" && (e.metaKey || e.ctrlKey)) {
                e.preventDefault();
                sendMessage(message, chatHistory);
                setMessage("");
              }
              if (e.key === "Escape") {
                e.preventDefault();
                setMessage("");
              }
            }}
          >
            {DISPLAY_CLEAR_BUTTON && chatHistory.length > 1 ? (
              <button
                className="tw-bg-gray-lightest tw-text-gray-darker tw-py-2 tw-px-4 tw-rounded-l-lg tw-border-gray-dark tw-border"
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  clear();
                  setMessage("");
                }}
              >
                Clear
              </button>
            ) : null}
            <label htmlFor="message" className="tw-sr-only">
              Message
            </label>
            <textarea
              id="message"
              ref={textareaRef}
              value={message}
              className="tw-w-full tw-rounded-sm tw-py-2 tw-px-3 tw-border-teal tw-outline-none tw-border-2 tw-font-mono tw-min-h-40 tw-resize-none"
              placeholder={
                state == "idle" ? "Paste a component’s code..." : "..."
              }
              onChange={(e) => setMessage(e.target.value)}
              disabled={state !== "idle"}
              autoFocus
              data-enable-grammarly="false"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            ></textarea>
            {DISPLAY_SUBMIT_BUTTON && state === "idle" ? (
              <button
                className="tw-bg-teal tw-text-teal-darkest tw-font-bold tw-py-2 tw-px-4 tw-rounded-r-lg tw--ml-[1px] tw-outline-none focus:tw-ring-2 focus:tw-ring-offset-1 focus:tw-ring-teal"
                type="submit"
              >
                Send
              </button>
            ) : null}
          </form>
          <p className="tw-text-xs tw-text-gray-dark tw-pt-1 tw-flex tw-gap-8 tw-text-center tw-justify-center tw-mt-2">
            <span>
              Submit:{" "}
              <kbd className="tw-px-1 tw-py-[2px] tw-border tw-border-gray-light tw-bg-gray-lightest tw-rounded-[4px]">
                cmd
              </kbd>{" "}
              +{" "}
              <kbd className="tw-px-1 tw-py-[2px] tw-border tw-border-gray-light tw-bg-gray-lightest tw-rounded-[4px]">
                return
              </kbd>
            </span>
            <span>
              Copy story:{" "}
              <kbd className="tw-px-1 tw-py-[2px] tw-border tw-border-gray-light tw-bg-gray-lightest tw-rounded-[4px]">
                cmd
              </kbd>{" "}
              +{" "}
              <kbd className="tw-px-1 tw-py-[2px] tw-border tw-border-gray-light tw-bg-gray-lightest tw-rounded-[4px]">
                shift
              </kbd>{" "}
              +{" "}
              <kbd className="tw-px-1 tw-py-[2px] tw-border tw-border-gray-light tw-bg-gray-lightest tw-rounded-[4px]">
                C
              </kbd>
            </span>
            <span>Clear chat: refresh the page</span>
          </p>
        </section>
        <div className="tw-flex tw-justify-center">
          <p className="tw-text-xxs tw-text-gray-dark tw-mt-5">
            Built with{" "}
            <a
              className="tw-underline"
              href="https://github.com/ascorbic/daneel"
            >
              Daneel
            </a>
          </p>
        </div>
      </main>
    </App>
  );
}
